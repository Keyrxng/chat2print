function createUIForImage(image) {
  const pd = image.parentElement;
  const pdd = pd.parentElement;
  const pddd = pdd.parentElement;
  const flexDiv = pddd.parentElement;
  const finalDiv = flexDiv.parentElement;

  const exportButton = document.createElement("button");
  exportButton.innerText = "Chat2Print";
  exportButton.style.backgroundColor = "white";
  exportButton.style.color = "black";
  exportButton.style.padding = "10px";
  exportButton.style.borderRadius = "5px";
  exportButton.style.margin = "10px";
  exportButton.style.cursor = "pointer";
  exportButton.style.fontWeight = "bold";
  exportButton.style.fontSize = "16px";
  exportButton.style.border = "none";
  exportButton.style.boxShadow = "0 2px 4px 0 rgba(0,0,0,0.2)";
  exportButton.style.transition = "0.3s";

  exportButton.onclick = () => {
    console.log("Clicked export button");
    console.log("Image:", image.src);
    fetch("http://localhost:3000/api/pod", {
      method: "POST",
      mode: "no-cors",
      headers: {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*",
        "no-cors": "true",
      },
      body: JSON.stringify({ imageUrl: image.src }),
    })
      .then((data) => {
        console.log("Success:", data);
      })
      .catch((error) => {
        console.error("Error:", error);
      });

    console.log("Done");
  };

  const exportButtonContainer = document.createElement("div");
  exportButtonContainer.style.display = "flex";
  exportButtonContainer.style.flexDirection = "column";

  exportButtonContainer.appendChild(exportButton);

  finalDiv.appendChild(exportButtonContainer);
}

function handleMutations(mutations) {
  mutations.forEach((mutation) => {
    mutation.addedNodes.forEach((node) => {
      if (node.nodeName === "DIV" && node.classList.contains("flex")) {
        // Traverse the div.flex element to find the image
        const images = node.querySelectorAll('img[alt="Generated by DALLÂ·E"]');
        images.forEach((image) => {
          console.log("Found image:", image);
          createUIForImage(image);
        });
      }
    });
  });
}

const observer = new MutationObserver(handleMutations);

observer.observe(document.body, { childList: true, subtree: true });
