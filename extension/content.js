function createUIForImage(image) {
  const pd = image.parentElement;

  const pdd = pd.parentElement;
  const pddd = pdd.parentElement;
  const flexDiv = pddd.parentElement;
  const finalDiv = flexDiv.parentElement;

  const exportButton = document.createElement("button");
  exportButton.innerText = "Export to Chat2Print";
  exportButton.style.color = "#fdc80a";
  exportButton.style.padding = "10px";
  exportButton.style.borderRadius = "5px";
  exportButton.style.margin = "10px";
  exportButton.style.cursor = "pointer";
  exportButton.style.fontWeight = "bold";
  exportButton.style.fontSize = "16px";
  exportButton.style.border = "none";
  exportButton.style.boxShadow = "0 2px 4px 0 rgba(0,0,0,0.2)";
  exportButton.style.transition = "0.3s";

  exportButton.onclick = () => fetchAndConvertImage(image.src);

  const exportButtonContainer = document.createElement("div");
  exportButtonContainer.style.display = "flex";
  exportButtonContainer.style.flexDirection = "column";

  exportButtonContainer.appendChild(exportButton);

  finalDiv.appendChild(exportButtonContainer);
}
async function fetchAndConvertImage(imageUrl) {
  try {
    chrome.runtime.sendMessage({
      message: "create",
      image64: imageUrl,
    });
  } catch (error) {
    console.error("Error fetching and converting image:", error);
  }
}
function handleMutations(mutations) {
  mutations.forEach((mutation) => {
    mutation.addedNodes.forEach((node) => {
      if (node.nodeName === "DIV" && node.classList.contains("flex")) {
        const images = node.querySelectorAll('img[alt="Generated by DALLÂ·E"]');
        images.forEach((image) => {
          createUIForImage(image);
        });
      }
    });
  });
}

const token = "sb-ywaeexoevxxjquwlhfjx-auth-token";
const chat2printUrl = "https://chat2print.xyz";
const localhostUrl = "http://localhost:3000/";

async function getCookie(name, url) {
  return new Promise((resolve) => {
    chrome.cookies.get({ name, url }, (cookie) => {
      resolve(cookie ? cookie.value : null);
    });
  });
}

// Not using during MVP
// async function background() {
//   const accessToken = await getCookie(token, localhostUrl);
//   console.log("accessToken: ", accessToken);
//   if (accessToken) {
//     chrome.runtime.sendMessage({
//       message: "loginWithToken",
//       accessToken,
//     });
//   } else {
//     chrome.runtime.sendMessage({ message: "getToken" });
//   }
// }

const currentUrl = window.location.hostname;

if (currentUrl === "chat.openai.com") {
  const observer = new MutationObserver(handleMutations);

  observer.observe(document.body, { childList: true, subtree: true });
} else {
  // background();
}
