const SUPABASE_KEY =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl3YWVleG9ldnh4anF1d2xoZmp4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDE1MTI0NzAsImV4cCI6MjAxNzA4ODQ3MH0.47_j0Q-nfP1bvG8wUP5RAsrpQKZMuZkv_rPvmjVIXHM";
const SUPABASE_URL = "https://ywaeexoevxxjquwlhfjx.supabase.co";

function createUIForImage(image) {
  const pd = image.parentElement;
  const svgInPd = pd.querySelector("svg");

  const pdd = pd.parentElement;
  const pddd = pdd.parentElement;
  const flexDiv = pddd.parentElement;
  const finalDiv = flexDiv.parentElement;

  const exportButton = document.createElement("button");
  exportButton.innerText = "Export to Chat2Print";
  exportButton.style.color = "#fdc80a";
  exportButton.style.padding = "10px";
  exportButton.style.borderRadius = "5px";
  exportButton.style.margin = "10px";
  exportButton.style.cursor = "pointer";
  exportButton.style.fontWeight = "bold";
  exportButton.style.fontSize = "16px";
  exportButton.style.border = "none";
  exportButton.style.boxShadow = "0 2px 4px 0 rgba(0,0,0,0.2)";
  exportButton.style.transition = "0.3s";

  exportButton.onclick = () => fetchAndConvertImage(image.src);

  const exportButtonContainer = document.createElement("div");
  exportButtonContainer.style.display = "flex";
  exportButtonContainer.style.flexDirection = "column";

  exportButtonContainer.appendChild(exportButton);

  finalDiv.appendChild(exportButtonContainer);
}
async function fetchAndConvertImage(imageUrl) {
  try {
    chrome.runtime.sendMessage({
      message: "create",
      image64: imageUrl,
    });
  } catch (error) {
    console.error("Error fetching and converting image:", error);
  }
}
function handleMutations(mutations) {
  mutations.forEach((mutation) => {
    mutation.addedNodes.forEach((node) => {
      if (node.nodeName === "DIV" && node.classList.contains("flex")) {
        // Traverse the div.flex element to find the image
        const images = node.querySelectorAll('img[alt="Generated by DALLÂ·E"]');
        images.forEach((image) => {
          console.log("Found image:", image);
          createUIForImage(image);
        });
      }
    });
  });
}

/**
 * Runs on chat2print and grabs the login tokens from the extension
 * and fires an event that chat2print can listen for to get the tokens
 */
async function background() {
  // grab tokens from the site login
  const at = sessionStorage.getItem("accessT");
  const rt = sessionStorage.getItem("refreshT");

  const sat = await chrome.storage.local.get(["accessT"]);
  const srt = await chrome.storage.local.get(["refreshT"]);

  if (sat.accessT && srt.refreshT) {
    // background has piped the ext tokens into local
    // let's set them into session for the site
    sessionStorage.setItem("accessT", sat.accessT);
    sessionStorage.setItem("refreshT", srt.refreshT);
  } else if (!at || !rt) {
    // not logged in via site
    // let's try get the ext tokens and log them in
    chrome.runtime.sendMessage({ message: "getToken" });
  } else {
    // logged in via site
    // let's send the tokens to the ext
    chrome.runtime.sendMessage({ message: "getToken", at, rt });
  }
}

const currentUrl = window.location.hostname;

console.log("currentUrl: ", currentUrl);
if (currentUrl === "chat.openai.com") {
  const observer = new MutationObserver(handleMutations);

  observer.observe(document.body, { childList: true, subtree: true });
} else if (currentUrl === "chat2print.xyz") {
  background();
} else if (currentUrl === "localhost") {
  console.log("localhost");
  background();
}
